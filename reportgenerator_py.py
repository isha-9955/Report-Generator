# -*- coding: utf-8 -*-
"""ReportGenerator.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ZxktxkSWop8lIJzCqVq4Wp-j6_tSNjy
"""

!pip install fpdf matplotlib
from fpdf import FPDF
from statistics import mean
from datetime import datetime
import csv
from collections import defaultdict
import matplotlib.pyplot as plt
import random

# Step 1: Write student data to CSV with NEW names
with open('data.csv', 'w') as file:
    file.write('Name,Subject,Score,Remarks\n')
    file.write('Ananya,Math,87,Very Good\n')
    file.write('Rohit,Science,91,Excellent\n')
    file.write('Meera,English,75,Needs Practice\n')
    file.write('Kunal,Math,83,Consistent\n')
    file.write('Sneha,Science,89,Very Good\n')
    file.write('Aman,English,79,Can Improve\n')
    file.write('Pooja,Math,94,Outstanding\n')
    file.write('Rahul,Science,85,Good\n')
    file.write('Tina,English,88,Very Good\n')
    file.write('Nikhil,Math,72,Practice More\n')

# Step 2: Read data
data = []
subjects = defaultdict(list)
student_names = set()

with open('data.csv', 'r') as file:
    reader = csv.DictReader(file)
    for row in reader:
        row['Score'] = int(row['Score'])
        data.append(row)
        subjects[row['Subject']].append(row['Score'])
        student_names.add(row['Name'])

# Step 3: Analytics
total_students = len(student_names)
overall_avg = mean([d['Score'] for d in data])
top_score = max([d['Score'] for d in data])
top_students = [d['Name'] for d in data if d['Score'] == top_score]

# Step 4a: Pie chart (Subject distribution)
subject_counts = {subject: len(scores) for subject, scores in subjects.items()}
labels = list(subject_counts.keys())
sizes = list(subject_counts.values())
colors = ['#ff9999', '#66b3ff', '#99ff99']

plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.title('Student Distribution by Subject')
plt.axis('equal')
plt.savefig('subject_pie.png')
plt.close()

# Step 4b: Bar graph (Student scores)
names = [d['Name'] for d in data]
scores = [d['Score'] for d in data]

plt.figure(figsize=(10, 5))
plt.bar(names, scores, color='skyblue')
plt.xlabel('Students')
plt.ylabel('Scores')
plt.title('Marks Distribution')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('marks_bar.png')
plt.close()

# Step 4c: Line graph (Student-wise progression)
plt.figure(figsize=(10, 5))
plt.plot(names, scores, marker='o', linestyle='-', color='green')
plt.title('Student-wise Score Progression')
plt.xlabel('Students')
plt.ylabel('Score')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.savefig('student_progress.png')
plt.close()

# Step 5: Generate simulated attendance
attendance = {}
for name in student_names:
    total_days = 30
    days_present = random.randint(20, 30)
    attendance_percentage = round((days_present / total_days) * 100, 2)
    attendance[name] = {
        "Total Days": total_days,
        "Days Present": days_present,
        "Attendance %": attendance_percentage
    }

# Step 6: Generate PDF
class PDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 16)
        self.cell(0, 10, "Student Performance Report", ln=True, align="C")

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

pdf = PDF()
pdf.set_auto_page_break(auto=True, margin=15)

# Cover Page
pdf.add_page()
pdf.set_font("Arial", "B", 20)
pdf.ln(60)
pdf.cell(0, 10, "Student Performance Report", ln=True, align="C")
pdf.set_font("Arial", "", 14)
pdf.ln(10)
pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%B %d, %Y')}", ln=True, align="C")

# Summary
pdf.add_page()
pdf.set_font("Arial", "B", 16)
pdf.cell(0, 10, "Summary of Results", ln=True)
pdf.set_font("Arial", "", 12)
pdf.ln(10)
pdf.cell(0, 10, f"Total Students: {total_students}", ln=True)
pdf.cell(0, 10, f"Overall Average Score: {overall_avg:.2f}", ln=True)
pdf.cell(0, 10, f"Top Score: {top_score} ({', '.join(top_students)})", ln=True)

pdf.ln(10)
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Subject-wise Averages:", ln=True)
pdf.set_font("Arial", "", 12)
for subject, scores in subjects.items():
    pdf.cell(0, 10, f"{subject}: {mean(scores):.2f}", ln=True)

# Pie Chart
pdf.ln(10)
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Subject Distribution Pie Chart:", ln=True)
pdf.image("subject_pie.png", x=50, w=100)

# Bar Graph
pdf.ln(10)
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Marks Distribution Bar Graph:", ln=True)
pdf.image("marks_bar.png", x=30, w=150)

# Line Graph
pdf.ln(10)
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Student-wise Score Line Graph:", ln=True)
pdf.image("student_progress.png", x=30, w=150)

# Detailed Scores Table
pdf.add_page()
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Detailed Student Scores", ln=True)
pdf.set_font("Arial", "B", 12)
pdf.cell(50, 10, "Name", border=1)
pdf.cell(40, 10, "Subject", border=1)
pdf.cell(25, 10, "Score", border=1)
pdf.cell(75, 10, "Remarks", border=1, ln=True)

for entry in data:
    pdf.set_font("Arial", "B" if entry['Score'] >= 90 else "", 12)
    pdf.set_text_color(0, 100, 255) if entry['Score'] >= 90 else pdf.set_text_color(0, 0, 0)
    pdf.cell(50, 10, entry['Name'], border=1)
    pdf.cell(40, 10, entry['Subject'], border=1)
    pdf.cell(25, 10, str(entry['Score']), border=1)
    pdf.cell(75, 10, entry['Remarks'], border=1, ln=True)

# Attendance Section
pdf.add_page()
pdf.set_font("Arial", "B", 14)
pdf.cell(0, 10, "Student Attendance Record", ln=True)
pdf.set_font("Arial", "B", 12)
pdf.cell(60, 10, "Name", border=1)
pdf.cell(40, 10, "Total Days", border=1)
pdf.cell(40, 10, "Days Present", border=1)
pdf.cell(50, 10, "Attendance %", border=1, ln=True)

for name in sorted(attendance.keys()):
    pdf.set_font("Arial", "", 12)
    pdf.cell(60, 10, name, border=1)
    pdf.cell(40, 10, str(attendance[name]['Total Days']), border=1)
    pdf.cell(40, 10, str(attendance[name]['Days Present']), border=1)
    pdf.cell(50, 10, f"{attendance[name]['Attendance %']}%", border=1, ln=True)

# Export PDF
pdf.output("report.pdf")
print("âœ… PDF generated: report.pdf")